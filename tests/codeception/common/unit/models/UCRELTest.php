<?php
/**
 * @TODO move to backend tests
 */
namespace tests\codeception\common\unit\models;


use GuzzleHttp\Client;
use pauko\billingual\clients\UCREL;
use tests\codeception\common\unit\TestCase;
use Yii;
use pauko\billingual\models\EnglishInfinitives;
use yii\base\Component;
use yii\base\Exception;
use yii\base\NotSupportedException;
use yii\web\IdentityInterface;
use Zelenin\yii\SemanticUI\modules\Sidebar;


class UCRELOrgTest extends TestCase
{
    use \Codeception\Specify;


    /**
     * @var Client
     */
    public $client;

    public function setUp()
    {
        $this->client = new Client();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testParse()
    {

        $response = (string) $this->client->get(UCREL::REQUEST_URL)->getBody();

        $lines = preg_split('/\n/', $response);
        foreach($lines as $line)
        {
            $line = trim($line);
            if ($line == '')
                    continue;
            $this->assertFalse($line == '');
            $data = str_getcsv($line,"\t");

            $this->assertTrue(is_string($data[0]), $data[0] . ' is string');
            $this->assertTrue(is_numeric($data[1]), $data[1] . ' is num');
            //codecept_debug($data);
        }



        $ucrel = new UCREL($this->client);
        $ucrel->request()->parse();

            ;
        $resultData = reset($ucrel->resultData);
        $this->assertTrue(is_string($resultData[0]), $resultData[0] . ' is string');
        $this->assertTrue(is_numeric($resultData[1]), $resultData[1] . ' is num');

        $resultData = end($ucrel->resultData);
        $this->assertTrue(is_string($resultData[0]), $resultData[0] . ' is string');
        $this->assertTrue(is_numeric($resultData[1]), $resultData[1] . ' is num');

    }


}

