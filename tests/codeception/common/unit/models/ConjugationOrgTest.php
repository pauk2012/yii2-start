<?php
/**
 * @TODO move to backend tests
 */
namespace tests\codeception\common\unit\models;


use GuzzleHttp\Client;
use pauko\billingual\clients\ConjugationOrg;
use pauko\billingual\models\SpanishConjugation;
use pauko\Diff\Diff;
use pauko\Diff\Renderer\Html\ArrayRenderer;
use pauko\Diff\Renderer\Html\Inline;
use pauko\Diff\Renderer\Html\SideBySide;
use pauko\Diff\Renderer\Text\Context;
use pauko\Diff\Renderer\Text\Unified;
use tests\codeception\common\unit\TestCase;
use Yii;
use pauko\billingual\models\Spanish;
use yii\base\Component;
use yii\base\Exception;
use yii\base\NotSupportedException;
use yii\web\IdentityInterface;
use Zelenin\yii\SemanticUI\modules\Sidebar;


class ConjuctionOrgTest extends TestCase
{
    const CONJUCTION_ORG_REQUEST_URL = 'http://www.conjugation.org/cgi-bin/conj.php';
    use \Codeception\Specify;


    /**
     * @var Client
     */
    public $client;

    public function setUp()
    {
        $this->client = new Client();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testParseRegular()
    {
        $postParams =[
            'word' => null ,//=trabajar
            'B1' => "Conjugate",
            'rb1' => "table",
            'dpresent_indicative' => "yes",
            'dimperfect' => "yes",
            'dpreterite' => 'yes',
            'dfuture' => "yes",
            'dconditional' => "yes",
            'dimperative' => "yes",
            'dp_sub' => "yes",
            'di_sub' => "yes",
            'dgerund' => "yes",
            'dp_participle' => "yes",
            'rb3' => "yes", //Subject Pronouns
            'rb2' => "ra"
        ];

        $postParams['word'] = 'trabajar';

        $response = (string) $this->client->post(self::CONJUCTION_ORG_REQUEST_URL, ['body' => $postParams])->getBody();

        $dom = new \DOMDocument();
        @$dom->loadHTML($response);
        $xpath = new \DOMXPath($dom);
        $presenceConjuctions = $xpath->query('.//td/strong[text()="Present Indicative:"]/following-sibling::node()[not(self::br)]');



        $textNode1  =  $presenceConjuctions->item(0);
        $this->assertTrue($textNode1 instanceof \DOMNode);

        $this->assertEquals('yo trabajo', $textNode1->textContent);



        $textNode2  =  $presenceConjuctions->item(1);
        $this->assertTrue($textNode2 instanceof \DOMNode);

        $this->assertEquals('tú trabajas', $textNode2->textContent);

        $textNode3  =  $presenceConjuctions->item(2);
        $this->assertTrue($textNode3 instanceof \DOMNode);

        $this->assertEquals('él/usted trabaja', $textNode3->textContent);

        $textNode4  =  $presenceConjuctions->item(3);
        $this->assertTrue($textNode4 instanceof \DOMNode);

        $this->assertEquals('nosotros trabajamos', $textNode4->textContent);


        $textNode5  =  $presenceConjuctions->item(4);
        $this->assertTrue($textNode5 instanceof \DOMNode);

        $this->assertEquals('vosotros trabajáis', $textNode5->textContent);

        $textNode6  =  $presenceConjuctions->item(5);
        $this->assertTrue($textNode6 instanceof \DOMNode);

        $this->assertEquals('ellos/ustedes trabajan', $textNode6->textContent);

    }
    public function testParseIrregular()
    {
        $postParams =[
            'word' => null ,//=trabajar
            'B1' => "Conjugate",
            'rb1' => "table",
            'dpresent_indicative' => "yes",
            'dimperfect' => "yes",
            'dpreterite' => 'yes',
            'dfuture' => "yes",
            'dconditional' => "yes",
            'dimperative' => "yes",
            'dp_sub' => "yes",
            'di_sub' => "yes",
            'dgerund' => "yes",
            'dp_participle' => "yes",
            'rb3' => "yes", //Subject Pronouns
            'rb2' => "ra"
        ];

        $postParams['word'] = 'aparecer';

        $response = (string) $this->client->post(self::CONJUCTION_ORG_REQUEST_URL, ['body' => $postParams])->getBody();

        $dom = new \DOMDocument();
        @$dom->loadHTML($response);
        $xpath = new \DOMXPath($dom);
        $presenceConjuctions = $xpath->query('.//td/strong[text()="Present Indicative:"]/following-sibling::node()[not(self::br)]');

        $this->assertEquals(6, $presenceConjuctions->length);

        /*
        codecept_debug($presenceConjuctions->item(SpanishConjugation::FORM_1S));
        codecept_debug($presenceConjuctions->item(SpanishConjugation::FORM_2S));
        codecept_debug($presenceConjuctions->item(SpanishConjugation::FORM_3S));
        codecept_debug($presenceConjuctions->item(SpanishConjugation::FORM_1P));
        codecept_debug($presenceConjuctions->item(SpanishConjugation::FORM_2P));
        codecept_debug($presenceConjuctions->item(SpanishConjugation::FORM_3P));
        */

        $textNode1  =  $presenceConjuctions->item(SpanishConjugation::FORM_1S);
        $this->assertFalse($textNode1 instanceof \DOMText);
        $textNode2  =  $presenceConjuctions->item(SpanishConjugation::FORM_2S);
        $this->assertTrue($textNode2 instanceof \DOMText);
        $textNode3  =  $presenceConjuctions->item(SpanishConjugation::FORM_3S);
        $this->assertTrue($textNode3 instanceof \DOMText);
        $textNode4  =  $presenceConjuctions->item(SpanishConjugation::FORM_1P);
        $this->assertTrue($textNode4 instanceof \DOMText);
        $textNode5  =  $presenceConjuctions->item(SpanishConjugation::FORM_2P);
        $this->assertTrue($textNode5 instanceof \DOMText);
        $textNode6  =  $presenceConjuctions->item(SpanishConjugation::FORM_3P);
        $this->assertTrue($textNode6 instanceof \DOMText);

    }



    public function testConjugationOrg()
    {
        $conjugations = new ConjugationOrg($this->client);
        $conjugations->setIsSubjectPronouns(false);
        $this->assertNotTrue($conjugations->getIsSubjectPronouns());
        $this->assertEquals('no', $conjugations->getPostParam('rb3'));
        $conjugations->setIsSubjectPronouns(true);
        $this->assertTrue($conjugations->getIsSubjectPronouns());
        $this->assertEquals('yes', $conjugations->getPostParam('rb3'));
        $conjugations->setIsSubjectPronouns(false);
        $conjugations->setInfinitive('trabajar');
        $this->assertEquals('trabajar', $conjugations->getPostParam('word'));
        $conjugations->loadConjugations();
        $this->assertEquals('trabajo', $conjugations->presentIndicative1s);
        $this->assertEquals('trabajas', $conjugations->presentIndicative2s);
        $this->assertEquals('trabaja', $conjugations->presentIndicative3s);
        $this->assertEquals('trabajamos', $conjugations->presentIndicative1p);
        $this->assertEquals('trabajáis', $conjugations->presentIndicative2p);
        $this->assertEquals('trabajan', $conjugations->presentIndicative3p);
        $this->assertTrue($conjugations->isRegular);


        $conjugations->setInfinitive('aparecer');
        $this->assertEquals('aparecer', $conjugations->getPostParam('word'));
        $conjugations->loadConjugations();
        $this->assertEquals('aparezco', $conjugations->presentIndicative1s);
        $this->assertEquals('apareces', $conjugations->presentIndicative2s);
        $this->assertEquals('aparece', $conjugations->presentIndicative3s);
        $this->assertEquals('aparecemos', $conjugations->presentIndicative1p);
        $this->assertEquals('aparecéis', $conjugations->presentIndicative2p);
        $this->assertEquals('aparecen', $conjugations->presentIndicative3p);
        $this->assertFalse($conjugations->isRegular);


    }





}

